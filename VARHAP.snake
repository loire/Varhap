import glob
import re
import sys
from os.path import join 


# Adapt here so you can get all read pairs and ref:

datadir="/homedir/loire/work/Mesoni_Janv2017/data/"
reffile="/homedir/loire/work/Mesoni_Janv2017/ref/Ref_Alphamesonivirus_KU095838.fas"

SAMPLES, = glob_wildcards(datadir+"{sample}_R1.fastq")


REPAIRPATH="/homedir/loire/bin/fastqCombinePairedEnd.py"
REPAIRDIR = "repaired"
THREADS_BWA=15

def message(mes):
	sys.stderr.write("|---- " + mes + "\n")

def errormes(mes):
	sys.stderr.write("| ERROR ----" + mes + "\n")


NBSAMPLES = len(SAMPLES)

message("Reference file is: "+str(reffile))
message(str(NBSAMPLES)+" samples  will be analysed:")
for i in SAMPLES:
	message(str(i))


 
rule All:
	input:
		reffile+".bwt",
		expand("Mapping/{smp}.bam",smp=SAMPLES),
		reffile+".fai",
		expand("Mapping/{smp}.rmdup.bam",smp=SAMPLES),
		expand("Mapping/{smp}.rmdup.bam.bai",smp=SAMPLES),
		expand("vcf/{smp}.vcf",smp=SAMPLES),
		expand("vcf/{smp}_filtered.vcf",smp=SAMPLES),

rule Index_Reference:
	input:
		reffile
	output:
		reffile+".bwt"
	shell:
		"""
		module load bioinfo/bwa/0.7.15;
		bwa index {input}
		"""

rule Repair_Pairs:
	input:
		R1=datadir+"/{smp}_R1.fastq",
		R2=datadir+"/{smp}_R2.fastq",
	
	params: exec = REPAIRPATH,
		outdir = REPAIRDIR
	output:	
		REPAIRDIR+"/{smp}_R1.fastq_pairs_R1.fastq",
		REPAIRDIR+"/{smp}_R2.fastq_pairs_R2.fastq",
		REPAIRDIR+"/{smp}_R1.fastq_widows.fastq"
	log: 	"logsRepairspairs/{smp}_repair.log"
	shell:
		"""
		module unload system/python/3.4.3 
		module load system/python/2.7.9 
		python {params.exec} {input.R1} {input.R2} {params.outdir} 2> {log}
		"""


rule Map_Reads_on_REF:
	input:
		cons=reffile,
		R1=REPAIRDIR+"/{smp}_R1.fastq_pairs_R1.fastq",
		R2=REPAIRDIR+"/{smp}_R2.fastq_pairs_R2.fastq",
	output:
		"Mapping/{smp}.bam"
	log:	
		"logs/{smp}_mappingREF.log"
	
	threads: THREADS_BWA
	shell:		
		"""
		module load bioinfo/samtools/1.3;
		module load bioinfo/bwa/0.7.15;
		bwa mem -t {threads} {input.cons} {input.R1} {input.R2} 2> {log} | samtools view -b -q 30 - | samtools sort - > {output}
		"""

rule index_ref:		
	input:
		reffile
	output:
		reffile+".fai"
	shell:
		"""	
		module load bioinfo/samtools/1.3;
		samtools faidx {input}
		"""
rule remove_dup:
	input:
		"Mapping/{smp}.bam"
	output:
		"Mapping/{smp}.rmdup.bam"
	log:
		"logs/{smp}.rmdup.log"
	shell:
		"""
		module load bioinfo/picard-tools/1.130;
		java -jar -Xmx4G /usr/local/bioinfo/picard-tools/1.130/picard.jar MarkDuplicates REMOVE_DUPLICATES=true  I={input} O={output}  M={log}
		"""

rule reindex:
	input:
		"Mapping/{smp}.rmdup.bam",
	output:
		"Mapping/{smp}.rmdup.bam.bai",
	shell:
		"""
		module load bioinfo/samtools/1.3;
		samtools index {input}
		"""

#rule freebayes_HAP:
#	input:
#		bam="Mapping_REF/{smp}.rmdup.bam",
#		bai ="Mapping_REF/{smp}.rmdup.bam.bai",
#		ref=reffile,
#		index=reffile+".fai",
#	output:
#		"vcf_HAP/{smp}.vcf"
#	threads: THREADS_BWA
#	log:	"logs/{smp}_freebayes.log"
#	shell:
#		"""
#		module load system/python/3.4.3
#		module load bioinfo/freebayes/0.9.21-5
#		PATH=$PATH:/usr/local/bioinfo/freebayes/0.9.21-5/scripts
#		freebayes-parallel <(fasta_generate_regions.py {input.index} 50000) {threads} -C 10  --ploidy 1 -f {input.ref} {input.bam} 2> {log} > {output}
#		"""
#
#rule filter_vcf_HAP:
#	input:
#		"vcf_HAP/{smp}.vcf",
#	output:
#		"vcf_HAP/{smp}_filtered.vcf",
#	shell:
#		"""
#		vcffilter -f "AO / RO > 0.01 D & P > 100  & RPL > 2 & RPR > 2 & SAF > 2 & SAR > 2" {input} > {output}
#		"""
#
#



rule freebayes:
	input:
		bam="Mapping/{smp}.rmdup.bam",
		bai ="Mapping/{smp}.rmdup.bam.bai",
		ref=reffile,
		index=reffile+".fai",
	output:
		"vcf/{smp}.vcf"
	threads: THREADS_BWA
	log:	"logs/{smp}_freebayes.log"
	shell:
		"""
		module load system/python/3.4.3
		module load bioinfo/freebayes/0.9.21-5
		PATH=$PATH:/usr/local/bioinfo/freebayes/0.9.21-5/scripts
		freebayes-parallel <(fasta_generate_regions.py {input.index} 50000) {threads} -C 10 -F 0.01 --pooled-continuous --ploidy 1 -f {input.ref} {input.bam} 2> {log} > {output}
		"""

rule filter_vcf:
	input:
		"vcf/{smp}.vcf",
	output:
		"vcf/{smp}_filtered.vcf",
	shell:
		"""
		vcffilter -f "AO / RO > 0.01 & DP > 50  & RPL > 2 & RPR > 2 & SAF > 2 & SAR > 2" {input} > {output}
		"""


rule clean:
	shell:
		"""
		rm snakejob*
		"""


